<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">dubs·tech</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://www.dubs.tech/feed.xml" />
<link rel="alternate" type="text/html" href="https://www.dubs.tech" />
<updated>2019-02-20T07:37:43+01:00</updated>
<id>https://www.dubs.tech/</id>
<author>
  <name>Paul Dubs</name>
  <uri>https://www.dubs.tech/</uri>
  <email>paul.dubs@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Quickstart with Deeplearning4J]]></title>
 <link rel="alternate" type="text/html" href="https://www.dubs.tech/guides/quickstart-with-dl4j/" />
  <id>https://www.dubs.tech/guides/quickstart-with-dl4j</id>
  <published>2018-08-06T11:43:27+02:00</published>
  <updated>2018-08-06T11:43:27+02:00</updated>
  <author>
    <name>Paul Dubs</name>
    <uri>https://www.dubs.tech</uri>
    <email>paul.dubs@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Deep learning, i.e. the use of deep, multi-layer neural networks, is the major driver of the current machine learning boom. From great leaps in quality in automatic translation, over autonomous driving, to beating grandmasters in the game Go, this technique has made a lot of headlines.&lt;/p&gt;

&lt;p&gt;Deeplearning4J, also called DL4J, is a Java library for Deep Learning. But, it also a whole family of other libraries that simplify the use of deep learning models with Java. As an alternative to the many Python based frameworks, DL4J offers a way to easily bring Deep Learning into existing enterprise environments.&lt;/p&gt;

&lt;p&gt;This blog post shows how to get started with DL4J in no time. By using an example where the goal is to predict whether a customer will leave his bank, each step of a typical workflow is considered. In order to focus on the individual steps, only excerpts of the code currently being discussed are shown. Imports and other Java boilerplate are left out, but the complete code including training data can be found at &lt;a href=&quot;https://github.com/treo/quickstart-with-dl4j&quot;&gt;https://github.com/treo/quickstart-with-dl4j&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://www.dubs.tech/guides/quickstart-with-dl4j/&quot;&gt;Quickstart with Deeplearning4J&lt;/a&gt; was originally published by Paul Dubs at &lt;a href=&quot;https://www.dubs.tech&quot;&gt;dubs·tech&lt;/a&gt; on August 06, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Benchmarking ND4J and Neanderthal – Part 2]]></title>
 <link rel="alternate" type="text/html" href="https://www.dubs.tech/blog/benchmarking-nd4j-and-neanderthal-2/" />
  <id>https://www.dubs.tech/blog/benchmarking-nd4j-and-neanderthal-2</id>
  <published>2018-06-29T12:12:55+02:00</published>
  <updated>2018-06-29T12:12:55+02:00</updated>
  <author>
    <name>Paul Dubs</name>
    <uri>https://www.dubs.tech</uri>
    <email>paul.dubs@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Dragan Djuric, the creator of Neanderthal, has conducted &lt;a href=&quot;https://dragan.rocks/articles/18/Neanderthal-vs-ND4J-vol2&quot;&gt;another series of benchmarks comparing ND4J and Neanderthal&lt;/a&gt;. This time the operation under test is a chain of matrix multiplications.&lt;/p&gt;

&lt;p&gt;He claims that in one of the benchmarks Neanderthal is 1000 times faster. This piqued my interest again since those kinds of differences don’t magically show up – especially not in a library as widely used as ND4J.&lt;/p&gt;

&lt;p&gt;In this post I investigate the source of this difference, show why it happens and what to do about it as a user of the library.&lt;/p&gt;

&lt;p&gt;This is a follow up post to &lt;a href=&quot;https://www.dubs.tech/blog/benchmarking-nd4j-and-neanderthal/&quot;&gt;Benchmarking ND4J and Neanderthal&lt;/a&gt;, so for some more context read that post as well.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://www.dubs.tech/blog/benchmarking-nd4j-and-neanderthal-2/&quot;&gt;Benchmarking ND4J and Neanderthal – Part 2&lt;/a&gt; was originally published by Paul Dubs at &lt;a href=&quot;https://www.dubs.tech&quot;&gt;dubs·tech&lt;/a&gt; on June 29, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Benchmarking ND4J and Neanderthal]]></title>
 <link rel="alternate" type="text/html" href="https://www.dubs.tech/blog/benchmarking-nd4j-and-neanderthal/" />
  <id>https://www.dubs.tech/blog/benchmarking-nd4j-and-neanderthal</id>
  <published>2018-06-26T13:17:10+02:00</published>
  <updated>2018-06-26T13:17:10+02:00</updated>
  <author>
    <name>Paul Dubs</name>
    <uri>https://www.dubs.tech</uri>
    <email>paul.dubs@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://nd4j.org/&quot;&gt;ND4J&lt;/a&gt; and &lt;a href=&quot;https://neanderthal.uncomplicate.org/&quot;&gt;Neanderthal&lt;/a&gt; are both libraries for fast matrix math on the JVM. ND4J targets Java users, while Neanderthal is aimed at Clojure users. Due to Clojure’s excellent Java Interop, it is quite easy to use ND4J in Clojure as well — even though it doesn’t provide an idiomatic Clojure API out of the box.&lt;/p&gt;

&lt;p&gt;Dragan Djuric, the creator of Neanderthal, has recently &lt;a href=&quot;https://dragan.rocks/articles/18/Neanderthal-vs-ND4J-vol1&quot;&gt;conducted a micro-benchmark of both ND4J and Neanderthal&lt;/a&gt;. The operation under test is matrix multiplication, in particular, calling GEMM from &lt;a href=&quot;https://software.intel.com/en-us/mkl&quot;&gt;Intel’s MKL&lt;/a&gt; library. The results have been quite unexpected, since both libraries shouldn’t do that much at that point, they basically pass on the call to MKL.&lt;/p&gt;

&lt;p&gt;When the results had shown that Neanderthal is 24 times faster with the smallest input of a 4x4 matrix, and still 20% faster at 4096x4096, it made me curious to what is going on. Especially since his ND4J code is based on &lt;a href=&quot;https://github.com/treo/benchmarking_nd4j/blob/master/src/main/java/com/example/neanderthal/NeanderthalComparison_2x2.java&quot;&gt;my original benchmarks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I originally compared ND4J and Neanderthal matrix multiplication speeds, the results left me wondering, since ND4J was slower at small sizes, yet faster at larger sizes. For this reason I never actually published any numbers. I originally based my comparison on &lt;a href=&quot;https://github.com/uncomplicate/neanderthal/blob/1fe9d82ecd5d4ee4d7b19d9dbf8105ede9b5e83b/examples/benchmarks/src/benchmarks/core.clj&quot;&gt;Dragan’s benchmark code&lt;/a&gt;, but I didn’t notice that doubles were used there instead of floats. His new benchmark has cleared this confusion, and I’m glad that Dragan has shared both code and results.&lt;/p&gt;

&lt;p&gt;In this post I try to validate Dragan’s results, show the detail that changes the numbers considerably, and rerun the benchmark after some additional optimizations have been added to ND4J.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://www.dubs.tech/blog/benchmarking-nd4j-and-neanderthal/&quot;&gt;Benchmarking ND4J and Neanderthal&lt;/a&gt; was originally published by Paul Dubs at &lt;a href=&quot;https://www.dubs.tech&quot;&gt;dubs·tech&lt;/a&gt; on June 26, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Implementing Conway’s Game of Life with Tensor Math]]></title>
 <link rel="alternate" type="text/html" href="https://www.dubs.tech/blog/game-of-life-apl-nd4j-samediff/" />
  <id>https://www.dubs.tech/blog/game-of-life-apl-nd4j-samediff</id>
  <published>2018-02-23T09:28:40+01:00</published>
  <updated>2018-02-23T09:28:40+01:00</updated>
  <author>
    <name>Paul Dubs</name>
    <uri>https://www.dubs.tech</uri>
    <email>paul.dubs@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Conway’s Game of Life is a simple simulation that works on a two-dimensional plane. It has just a few very simple rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An empty cell that has exactly 3 neighbors will be populated in the next timestep&lt;/li&gt;
  &lt;li&gt;A populated cell requires either 2 or 3 neighbors to stay populated, i.e. it will be unpopulated in the next timestep for any other case.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a lot of different ways to implement those rules. This post first looks at a solution in a quite unusual language, namely APL, before showing how to do the same thing using the Java tensor math library ND4J and its upcoming graph variant SameDiff.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://www.dubs.tech/blog/game-of-life-apl-nd4j-samediff/&quot;&gt;Implementing Conway’s Game of Life with Tensor Math&lt;/a&gt; was originally published by Paul Dubs at &lt;a href=&quot;https://www.dubs.tech&quot;&gt;dubs·tech&lt;/a&gt; on February 23, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Maven: Essentials]]></title>
 <link rel="alternate" type="text/html" href="https://www.dubs.tech/guides/maven-essentials/" />
  <id>https://www.dubs.tech/guides/maven-essentials</id>
  <published>2018-02-05T10:35:26+01:00</published>
  <updated>2018-02-05T10:35:26+01:00</updated>
  <author>
    <name>Paul Dubs</name>
    <uri>https://www.dubs.tech</uri>
    <email>paul.dubs@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This guide will explain the essentials you will need to get productive with Maven immediately. It is written with a complete beginner in mind. You should read this, if you don’t have any experience with Java package or dependency management beyond simply putting &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt; files on your class path.&lt;/p&gt;

&lt;p&gt;You might have been looking to use a library, and just couldn’t find the &lt;code class=&quot;highlighter-rouge&quot;&gt;.jar&lt;/code&gt; file for it, or you’ve been told to “just use Maven.” Maybe you just switched over to Java from a different programming language, and you want to know how dependency management works.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://www.dubs.tech/guides/maven-essentials/&quot;&gt;Maven: Essentials&lt;/a&gt; was originally published by Paul Dubs at &lt;a href=&quot;https://www.dubs.tech&quot;&gt;dubs·tech&lt;/a&gt; on February 05, 2018.&lt;/p&gt;
  </content>
</entry>

</feed>
